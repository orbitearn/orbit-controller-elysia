/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Decimal, Uint256, InstantiateMsg, ExecuteMsg, Uint128, Binary, TokenUnverified, Cw20ReceiveMsg, WeightItem, AssetItem, CurrencyForTokenUnverified, QueryMsg, MigrateMsg, AppInfoResponse, AusdcInfo, YieldInfo, Token, Addr, CurrencyForToken, ArrayOfCurrencyForToken, BalancesResponse, Uint64, Config, ArrayOfArrayOfAssetItem, ArrayOfTupleOfAddrAndArrayOfArrayOfAssetItem, DistributionState, ArrayOfTupleOfAddrAndDistributionState, ArrayOfTupleOfuint32AndArrayOfTupleOfStringAndDecimal, StateResponse, StoragesResponse, ArrayOfTupleOfAddrAndUint32, UserInfoResponse, DcaResponse, UserYield, ArrayOfUserInfoResponse, UserStoragesResponse } from "./Bank.types";
export interface BankMsg {
  contractAddress: string;
  sender: string;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  depositUsdc: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  withdrawAusdc: ({
    ausdcAmount
  }: {
    ausdcAmount?: Uint256;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  depositAusdc: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  withdrawUsdc: ({
    ausdcAmount
  }: {
    ausdcAmount?: Uint256;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  enableDca: ({
    fraction,
    swaps,
    weights
  }: {
    fraction: Decimal;
    swaps?: number;
    weights: WeightItem[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  disableDca: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  claimAssets: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  claimAndSwap: ({
    assets,
    feeAmount,
    prices,
    rewards,
    usdcYield
  }: {
    assets: AssetItem[];
    feeAmount: Uint256;
    prices: string[][];
    rewards: Uint256;
    usdcYield: Uint256;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  registerAsset: ({
    asset,
    price
  }: {
    asset: CurrencyForTokenUnverified;
    price: Decimal;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateUserState: ({
    addresses
  }: {
    addresses: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  enableCapture: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  disableCapture: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  acceptAdminRole: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateConfig: ({
    admin,
    ausdc,
    controller,
    feeRate,
    totalUsdcLimit,
    usdc
  }: {
    admin?: string;
    ausdc?: string;
    controller?: string;
    feeRate?: Decimal;
    totalUsdcLimit?: Uint256;
    usdc?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  pause: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unpause: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setYieldRate: ({
    value
  }: {
    value: Decimal;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class BankMsgComposer implements BankMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.depositUsdc = this.depositUsdc.bind(this);
    this.withdrawAusdc = this.withdrawAusdc.bind(this);
    this.depositAusdc = this.depositAusdc.bind(this);
    this.withdrawUsdc = this.withdrawUsdc.bind(this);
    this.enableDca = this.enableDca.bind(this);
    this.disableDca = this.disableDca.bind(this);
    this.claimAssets = this.claimAssets.bind(this);
    this.claimAndSwap = this.claimAndSwap.bind(this);
    this.registerAsset = this.registerAsset.bind(this);
    this.updateUserState = this.updateUserState.bind(this);
    this.enableCapture = this.enableCapture.bind(this);
    this.disableCapture = this.disableCapture.bind(this);
    this.acceptAdminRole = this.acceptAdminRole.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.pause = this.pause.bind(this);
    this.unpause = this.unpause.bind(this);
    this.setYieldRate = this.setYieldRate.bind(this);
  }
  receive = ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          receive: {
            amount,
            msg,
            sender
          }
        })),
        funds: _funds
      })
    };
  };
  depositUsdc = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          deposit_usdc: {}
        })),
        funds: _funds
      })
    };
  };
  withdrawAusdc = ({
    ausdcAmount
  }: {
    ausdcAmount?: Uint256;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          withdraw_ausdc: {
            ausdc_amount: ausdcAmount
          }
        })),
        funds: _funds
      })
    };
  };
  depositAusdc = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          deposit_ausdc: {}
        })),
        funds: _funds
      })
    };
  };
  withdrawUsdc = ({
    ausdcAmount
  }: {
    ausdcAmount?: Uint256;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          withdraw_usdc: {
            ausdc_amount: ausdcAmount
          }
        })),
        funds: _funds
      })
    };
  };
  enableDca = ({
    fraction,
    swaps,
    weights
  }: {
    fraction: Decimal;
    swaps?: number;
    weights: WeightItem[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          enable_dca: {
            fraction,
            swaps,
            weights
          }
        })),
        funds: _funds
      })
    };
  };
  disableDca = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          disable_dca: {}
        })),
        funds: _funds
      })
    };
  };
  claimAssets = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          claim_assets: {}
        })),
        funds: _funds
      })
    };
  };
  claimAndSwap = ({
    assets,
    feeAmount,
    prices,
    rewards,
    usdcYield
  }: {
    assets: AssetItem[];
    feeAmount: Uint256;
    prices: string[][];
    rewards: Uint256;
    usdcYield: Uint256;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          claim_and_swap: {
            assets,
            fee_amount: feeAmount,
            prices,
            rewards,
            usdc_yield: usdcYield
          }
        })),
        funds: _funds
      })
    };
  };
  registerAsset = ({
    asset,
    price
  }: {
    asset: CurrencyForTokenUnverified;
    price: Decimal;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          register_asset: {
            asset,
            price
          }
        })),
        funds: _funds
      })
    };
  };
  updateUserState = ({
    addresses
  }: {
    addresses: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_user_state: {
            addresses
          }
        })),
        funds: _funds
      })
    };
  };
  enableCapture = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          enable_capture: {}
        })),
        funds: _funds
      })
    };
  };
  disableCapture = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          disable_capture: {}
        })),
        funds: _funds
      })
    };
  };
  acceptAdminRole = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          accept_admin_role: {}
        })),
        funds: _funds
      })
    };
  };
  updateConfig = ({
    admin,
    ausdc,
    controller,
    feeRate,
    totalUsdcLimit,
    usdc
  }: {
    admin?: string;
    ausdc?: string;
    controller?: string;
    feeRate?: Decimal;
    totalUsdcLimit?: Uint256;
    usdc?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            admin,
            ausdc,
            controller,
            fee_rate: feeRate,
            total_usdc_limit: totalUsdcLimit,
            usdc
          }
        })),
        funds: _funds
      })
    };
  };
  pause = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          pause: {}
        })),
        funds: _funds
      })
    };
  };
  unpause = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unpause: {}
        })),
        funds: _funds
      })
    };
  };
  setYieldRate = ({
    value
  }: {
    value: Decimal;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_yield_rate: {
            value
          }
        })),
        funds: _funds
      })
    };
  };
}