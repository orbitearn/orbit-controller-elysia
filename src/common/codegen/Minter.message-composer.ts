/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, Logo, EmbeddedLogo, Binary, Uint128, InstantiateMarketingInfo, Metadata, DenomUnit, Cw20ReceiveMsg, QueryMsg, MigrateMsg, ArrayOfTupleOfUint128AndString, Addr, Config, Token, CurrencyInfo, CurrencyForToken, ArrayOfCurrencyInfo, FaucetConfig, Uint64, ArrayOfTupleOfAddrAndUint16 } from "./Minter.types";
export interface MinterMsg {
  contractAddress: string;
  sender: string;
  acceptAdminRole: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  acceptTokenOwnerRole: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  pause: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unpause: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateConfig: ({
    admin,
    cw20CodeId,
    maxTokensPerOwner,
    permissionlessTokenCreation,
    permissionlessTokenRegistration,
    whitelist
  }: {
    admin?: string;
    cw20CodeId?: number;
    maxTokensPerOwner?: number;
    permissionlessTokenCreation?: boolean;
    permissionlessTokenRegistration?: boolean;
    whitelist?: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  createNative: ({
    decimals,
    owner,
    permissionlessBurning,
    subdenom,
    whitelist
  }: {
    decimals?: number;
    owner?: string;
    permissionlessBurning?: boolean;
    subdenom: string;
    whitelist?: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  createCw20: ({
    cw20CodeId,
    decimals,
    marketing,
    name,
    owner,
    permissionlessBurning,
    symbol,
    whitelist
  }: {
    cw20CodeId?: number;
    decimals?: number;
    marketing?: InstantiateMarketingInfo;
    name: string;
    owner?: string;
    permissionlessBurning?: boolean;
    symbol: string;
    whitelist?: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  registerNative: ({
    decimals,
    denom,
    owner,
    permissionlessBurning,
    whitelist
  }: {
    decimals?: number;
    denom: string;
    owner?: string;
    permissionlessBurning?: boolean;
    whitelist?: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  registerCw20: ({
    address,
    cw20CodeId,
    decimals,
    owner,
    permissionlessBurning,
    whitelist
  }: {
    address: string;
    cw20CodeId?: number;
    decimals?: number;
    owner?: string;
    permissionlessBurning?: boolean;
    whitelist?: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateCurrencyInfo: ({
    denomOrAddress,
    owner,
    permissionlessBurning,
    whitelist
  }: {
    denomOrAddress: string;
    owner?: string;
    permissionlessBurning?: boolean;
    whitelist?: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateMetadataNative: ({
    denom,
    metadata
  }: {
    denom: string;
    metadata: Metadata;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateMetadataCw20: ({
    address,
    description,
    logo,
    project
  }: {
    address: string;
    description?: string;
    logo?: Logo;
    project?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  excludeNative: ({
    denom
  }: {
    denom: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  excludeCw20: ({
    address
  }: {
    address: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateFaucetConfig: ({
    claimCooldown,
    claimableAmount,
    denomOrAddress
  }: {
    claimCooldown?: number;
    claimableAmount?: Uint128;
    denomOrAddress: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  mint: ({
    amount,
    denomOrAddress,
    recipient
  }: {
    amount: Uint128;
    denomOrAddress: string;
    recipient?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  mintMultiple: ({
    accountAndAmountList,
    denomOrAddress
  }: {
    accountAndAmountList: string[][];
    denomOrAddress: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  burn: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  claim: ({
    denomOrAddress
  }: {
    denomOrAddress: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class MinterMsgComposer implements MinterMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.acceptAdminRole = this.acceptAdminRole.bind(this);
    this.acceptTokenOwnerRole = this.acceptTokenOwnerRole.bind(this);
    this.pause = this.pause.bind(this);
    this.unpause = this.unpause.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.createNative = this.createNative.bind(this);
    this.createCw20 = this.createCw20.bind(this);
    this.registerNative = this.registerNative.bind(this);
    this.registerCw20 = this.registerCw20.bind(this);
    this.updateCurrencyInfo = this.updateCurrencyInfo.bind(this);
    this.updateMetadataNative = this.updateMetadataNative.bind(this);
    this.updateMetadataCw20 = this.updateMetadataCw20.bind(this);
    this.excludeNative = this.excludeNative.bind(this);
    this.excludeCw20 = this.excludeCw20.bind(this);
    this.updateFaucetConfig = this.updateFaucetConfig.bind(this);
    this.mint = this.mint.bind(this);
    this.mintMultiple = this.mintMultiple.bind(this);
    this.burn = this.burn.bind(this);
    this.claim = this.claim.bind(this);
    this.receive = this.receive.bind(this);
  }
  acceptAdminRole = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          accept_admin_role: {}
        })),
        funds: _funds
      })
    };
  };
  acceptTokenOwnerRole = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          accept_token_owner_role: {}
        })),
        funds: _funds
      })
    };
  };
  pause = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          pause: {}
        })),
        funds: _funds
      })
    };
  };
  unpause = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unpause: {}
        })),
        funds: _funds
      })
    };
  };
  updateConfig = ({
    admin,
    cw20CodeId,
    maxTokensPerOwner,
    permissionlessTokenCreation,
    permissionlessTokenRegistration,
    whitelist
  }: {
    admin?: string;
    cw20CodeId?: number;
    maxTokensPerOwner?: number;
    permissionlessTokenCreation?: boolean;
    permissionlessTokenRegistration?: boolean;
    whitelist?: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            admin,
            cw20_code_id: cw20CodeId,
            max_tokens_per_owner: maxTokensPerOwner,
            permissionless_token_creation: permissionlessTokenCreation,
            permissionless_token_registration: permissionlessTokenRegistration,
            whitelist
          }
        })),
        funds: _funds
      })
    };
  };
  createNative = ({
    decimals,
    owner,
    permissionlessBurning,
    subdenom,
    whitelist
  }: {
    decimals?: number;
    owner?: string;
    permissionlessBurning?: boolean;
    subdenom: string;
    whitelist?: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_native: {
            decimals,
            owner,
            permissionless_burning: permissionlessBurning,
            subdenom,
            whitelist
          }
        })),
        funds: _funds
      })
    };
  };
  createCw20 = ({
    cw20CodeId,
    decimals,
    marketing,
    name,
    owner,
    permissionlessBurning,
    symbol,
    whitelist
  }: {
    cw20CodeId?: number;
    decimals?: number;
    marketing?: InstantiateMarketingInfo;
    name: string;
    owner?: string;
    permissionlessBurning?: boolean;
    symbol: string;
    whitelist?: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_cw20: {
            cw20_code_id: cw20CodeId,
            decimals,
            marketing,
            name,
            owner,
            permissionless_burning: permissionlessBurning,
            symbol,
            whitelist
          }
        })),
        funds: _funds
      })
    };
  };
  registerNative = ({
    decimals,
    denom,
    owner,
    permissionlessBurning,
    whitelist
  }: {
    decimals?: number;
    denom: string;
    owner?: string;
    permissionlessBurning?: boolean;
    whitelist?: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          register_native: {
            decimals,
            denom,
            owner,
            permissionless_burning: permissionlessBurning,
            whitelist
          }
        })),
        funds: _funds
      })
    };
  };
  registerCw20 = ({
    address,
    cw20CodeId,
    decimals,
    owner,
    permissionlessBurning,
    whitelist
  }: {
    address: string;
    cw20CodeId?: number;
    decimals?: number;
    owner?: string;
    permissionlessBurning?: boolean;
    whitelist?: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          register_cw20: {
            address,
            cw20_code_id: cw20CodeId,
            decimals,
            owner,
            permissionless_burning: permissionlessBurning,
            whitelist
          }
        })),
        funds: _funds
      })
    };
  };
  updateCurrencyInfo = ({
    denomOrAddress,
    owner,
    permissionlessBurning,
    whitelist
  }: {
    denomOrAddress: string;
    owner?: string;
    permissionlessBurning?: boolean;
    whitelist?: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_currency_info: {
            denom_or_address: denomOrAddress,
            owner,
            permissionless_burning: permissionlessBurning,
            whitelist
          }
        })),
        funds: _funds
      })
    };
  };
  updateMetadataNative = ({
    denom,
    metadata
  }: {
    denom: string;
    metadata: Metadata;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_metadata_native: {
            denom,
            metadata
          }
        })),
        funds: _funds
      })
    };
  };
  updateMetadataCw20 = ({
    address,
    description,
    logo,
    project
  }: {
    address: string;
    description?: string;
    logo?: Logo;
    project?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_metadata_cw20: {
            address,
            description,
            logo,
            project
          }
        })),
        funds: _funds
      })
    };
  };
  excludeNative = ({
    denom
  }: {
    denom: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          exclude_native: {
            denom
          }
        })),
        funds: _funds
      })
    };
  };
  excludeCw20 = ({
    address
  }: {
    address: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          exclude_cw20: {
            address
          }
        })),
        funds: _funds
      })
    };
  };
  updateFaucetConfig = ({
    claimCooldown,
    claimableAmount,
    denomOrAddress
  }: {
    claimCooldown?: number;
    claimableAmount?: Uint128;
    denomOrAddress: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_faucet_config: {
            claim_cooldown: claimCooldown,
            claimable_amount: claimableAmount,
            denom_or_address: denomOrAddress
          }
        })),
        funds: _funds
      })
    };
  };
  mint = ({
    amount,
    denomOrAddress,
    recipient
  }: {
    amount: Uint128;
    denomOrAddress: string;
    recipient?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          mint: {
            amount,
            denom_or_address: denomOrAddress,
            recipient
          }
        })),
        funds: _funds
      })
    };
  };
  mintMultiple = ({
    accountAndAmountList,
    denomOrAddress
  }: {
    accountAndAmountList: string[][];
    denomOrAddress: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          mint_multiple: {
            account_and_amount_list: accountAndAmountList,
            denom_or_address: denomOrAddress
          }
        })),
        funds: _funds
      })
    };
  };
  burn = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          burn: {}
        })),
        funds: _funds
      })
    };
  };
  claim = ({
    denomOrAddress
  }: {
    denomOrAddress: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          claim: {
            denom_or_address: denomOrAddress
          }
        })),
        funds: _funds
      })
    };
  };
  receive = ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          receive: {
            amount,
            msg,
            sender
          }
        })),
        funds: _funds
      })
    };
  };
}