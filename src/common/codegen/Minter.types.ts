/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export interface InstantiateMsg {
  cw20_code_id?: number | null;
  max_tokens_per_owner?: number | null;
  permissionless_token_creation?: boolean | null;
  permissionless_token_registration?: boolean | null;
  whitelist?: string[] | null;
}
export type ExecuteMsg = {
  accept_admin_role: {};
} | {
  accept_token_owner_role: {};
} | {
  pause: {};
} | {
  unpause: {};
} | {
  update_config: {
    admin?: string | null;
    cw20_code_id?: number | null;
    max_tokens_per_owner?: number | null;
    permissionless_token_creation?: boolean | null;
    permissionless_token_registration?: boolean | null;
    whitelist?: string[] | null;
  };
} | {
  create_native: {
    decimals?: number | null;
    owner?: string | null;
    permissionless_burning?: boolean | null;
    subdenom: string;
    whitelist?: string[] | null;
  };
} | {
  create_cw20: {
    cw20_code_id?: number | null;
    decimals?: number | null;
    marketing?: InstantiateMarketingInfo | null;
    name: string;
    owner?: string | null;
    permissionless_burning?: boolean | null;
    symbol: string;
    whitelist?: string[] | null;
  };
} | {
  register_native: {
    decimals?: number | null;
    denom: string;
    owner?: string | null;
    permissionless_burning?: boolean | null;
    whitelist?: string[] | null;
  };
} | {
  register_cw20: {
    address: string;
    cw20_code_id?: number | null;
    decimals?: number | null;
    owner?: string | null;
    permissionless_burning?: boolean | null;
    whitelist?: string[] | null;
  };
} | {
  update_currency_info: {
    denom_or_address: string;
    owner?: string | null;
    permissionless_burning?: boolean | null;
    whitelist?: string[] | null;
  };
} | {
  update_metadata_native: {
    denom: string;
    metadata: Metadata;
  };
} | {
  update_metadata_cw20: {
    address: string;
    description?: string | null;
    logo?: Logo | null;
    project?: string | null;
  };
} | {
  exclude_native: {
    denom: string;
  };
} | {
  exclude_cw20: {
    address: string;
  };
} | {
  update_faucet_config: {
    claim_cooldown?: number | null;
    claimable_amount?: Uint128 | null;
    denom_or_address: string;
  };
} | {
  mint: {
    amount: Uint128;
    denom_or_address: string;
    recipient?: string | null;
  };
} | {
  mint_multiple: {
    account_and_amount_list: [string, Uint128][];
    denom_or_address: string;
  };
} | {
  burn: {};
} | {
  claim: {
    denom_or_address: string;
  };
} | {
  receive: Cw20ReceiveMsg;
};
export type Logo = {
  url: string;
} | {
  embedded: EmbeddedLogo;
};
export type EmbeddedLogo = {
  svg: Binary;
} | {
  png: Binary;
};
export type Binary = string;
export type Uint128 = string;
export interface InstantiateMarketingInfo {
  description?: string | null;
  logo?: Logo | null;
  marketing?: string | null;
  project?: string | null;
}
export interface Metadata {
  base: string;
  denom_units: DenomUnit[];
  description: string;
  display: string;
  name: string;
  symbol: string;
  uri?: string | null;
  uri_hash?: string | null;
}
export interface DenomUnit {
  aliases: string[];
  denom: string;
  exponent: number;
}
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
}
export type QueryMsg = {
  config: {};
} | {
  faucet_config: {
    denom_or_address: string;
  };
} | {
  currency_info: {
    denom_or_address: string;
  };
} | {
  currency_info_list: {
    amount: number;
    start_after?: string | null;
  };
} | {
  currency_info_list_by_owner: {
    amount: number;
    owner: string;
    start_after?: string | null;
  };
} | {
  token_count_list: {
    amount: number;
    start_after?: string | null;
  };
} | {
  last_claim_date: {
    denom_or_address: string;
    user: string;
  };
} | {
  balances: {
    account: string;
  };
};
export interface MigrateMsg {
  version: string;
}
export type ArrayOfTupleOfUint128AndString = [Uint128, string][];
export type Addr = string;
export interface Config {
  admin: Addr;
  cw20_code_id?: number | null;
  max_tokens_per_owner: number;
  permissionless_token_creation: boolean;
  permissionless_token_registration: boolean;
  whitelist: Addr[];
}
export type Token = {
  native: {
    denom: string;
  };
} | {
  cw20: {
    address: Addr;
  };
};
export interface CurrencyInfo {
  currency: CurrencyForToken;
  cw20_code_id?: number | null;
  owner: Addr;
  permissionless_burning: boolean;
  whitelist: Addr[];
}
export interface CurrencyForToken {
  decimals: number;
  token: Token;
}
export type ArrayOfCurrencyInfo = CurrencyInfo[];
export interface FaucetConfig {
  claim_cooldown: number;
  claimable_amount: Uint128;
}
export type Uint64 = number;
export type ArrayOfTupleOfAddrAndUint16 = [Addr, number][];